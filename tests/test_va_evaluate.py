"""Test the va_evaluate function.

This is used to generate the basis functions and their derivatives
given the boundary points, the hessenbergs and the poles.
"""


def test_import_va_evaluate():
    """Test that the va_evaluate function can be imported."""
    from pyls.numerics import va_evaluate

    assert va_evaluate is not None


def test_small_va_evaluate():
    """Test the va_evaluate function for a small example."""
    from pyls.numerics import va_orthogonalise, va_evaluate
    import numpy as np

    Z = np.array([0, 2, 1 + 1j]).reshape(3, 1)
    n = 1
    hessenbergs, Q = va_orthogonalise(Z, n)
    H = hessenbergs[0]
    basis, basis_deriv = va_evaluate(Z, hessenbergs)
    basis_deriv_answer = np.array(
        [[0, 0, 0], [1 / H[1, 0], 1 / H[1, 0], 1 / H[1, 0]]]
    ).T
    assert np.allclose(basis, Q)
    assert np.allclose(basis_deriv, basis_deriv_answer)


def test_large_va_evaluate():
    """Test va_evaluate for a large example generated by the MATLAB code."""
    from pyls.numerics import va_orthogonalise, va_evaluate
    import numpy as np
    from scipy.io import loadmat

    Z = np.exp(1j * np.linspace(0, 2 * np.pi, 100)).reshape(100, 1)
    hessenbergs, Q = va_orthogonalise(Z, 10)
    basis, basis_deriv = va_evaluate(Z, hessenbergs)
    basis_answer = loadmat("tests/data/VAorthog_circle_R0.mat")["R0"]
    basis_deriv_answer = loadmat("tests/data/VAorthog_circle_R1.mat")["R1"]
    assert np.allclose(basis, basis_answer)
    assert np.allclose(basis_deriv, basis_deriv_answer)


if __name__ == "__main__":
    test_import_va_evaluate()
    test_small_va_evaluate()
    test_large_va_evaluate()
